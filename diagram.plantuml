@startuml Cars

interface Engine{
    +Engine(int power);
    +~Engine();
    +int power_;
}

class ElectricEngine {
    +ElectricEngine(int power, int batteryCapacity);
    +int power_;
    +int batteryCapacity_;
}

class PetrolEngine {
    +PetrolEngine(int power, float capacity, int gears);
    +int power_;
    +float capacity_;
    +int gears_;
    +int currentGear_;
}

interface Car {
    +Car();
    +~Car();
    +void turnLeft();
    +void turnRight();
    +void brake();
    +void accelerate(int speed);
    {abstract}+void restore();
    {abstract}+void changeEngine(Engine* engine);
}

class ElectricCar {
    +ElectricCar(ElectricEngine* engine);
    +~ElectricCar();
    +void restore();
    void changeEngine(Engine* engine);
    -ElectricEngine* electricEngine_;
    -void charge();
}

class HybridCar {
    +HybridCar(PetrolEngine* petrolEng, ElectricEngine* electricEng);
    +~HybridCar();
    +void restore();
    +void changeEngine(Engine* engine);
}

class PetrolCar {
    +PetrolCar(PetrolEngine* engine);
    +~PetrolCar();
    +void changeGear(int gear);
    +void restore();
    +void changeEngine(Engine* engine);
    -PetrolEngine* petrolEngine_;
    -void refuel();
}

class InvalidGear <extends std::logic_error> {
    +InvalidGear(const std::string& what_arg);
}


Engine <|-- PetrolEngine
Engine <|-- ElectricEngine

Car <|-- ElectricCar
Car <|-- PetrolCar

ElectricCar <|-- HybridCar
PetrolCar <|-- HybridCar

ElectricCar *-- ElectricEngine
PetrolCar *-- PetrolEngine

@enduml
